/*
 * This code was generated by
 *  ___ ___   _   ___ _  _    _____ _   _    _  ___   ___      _   ___ ___      ___   _   ___     ___ ___ _  _ ___ ___    _ _____ ___  ___ 
 * | _ \ __| /_\ / __| || |__|_   _/_\ | |  | |/ | \ / / |    /_\ | _ ) __|___ / _ \ /_\ |_ _|__ / __| __| \| | __| _ \  /_\_   _/ _ \| _ \
 * |   / _| / _ \ (__| __ |___|| |/ _ \| |__| ' < \ V /| |__ / _ \| _ \__ \___| (_) / _ \ | |___| (_ | _|| .` | _||   / / _ \| || (_) |   /
 * |_|_\___/_/ \_\___|_||_|    |_/_/ \_\____|_|\_\ |_| |____/_/ \_\___/___/    \___/_/ \_\___|   \___|___|_|\_|___|_|_\/_/ \_\_| \___/|_|_\
 * 
 * Reach Authentix API
 *  Reach Authentix API helps you easily integrate user authentification in your application. The authentification allows to verify that a user is indeed at the origin of a request from your application.  At the moment, the Reach Authentix API supports the following channels:    * SMS      * Email   We are continuously working to add additionnal channels. ## Base URL All endpoints described in this documentation are relative to the following base URL: ``` https://api.reach.talkylabs.com/rest/authentix/v1/ ```  The API is provided over HTTPS protocol to ensure data privacy.  ## API Authentication Requests made to the API must be authenticated. You need to provide the `ApiUser` and `ApiKey` associated with your applet. This information could be found in the settings of the applet. ```curl curl -X GET [BASE_URL]/configurations -H \"ApiUser:[Your_Api_User]\" -H \"ApiKey:[Your_Api_Key]\" ``` ## Reach Authentix API Workflow Three steps are needed in order to authenticate a given user using the Reach Authentix API. ### Step 1: Create an Authentix configuration A configuration is a set of settings used to define and send an authentication code to a user. This includes, for example: ```   - the length of the authentication code,    - the message template,    - and so on... ``` A configuaration could be created via the web application or directly using the Reach Authentix API. This step does not need to be performed every time one wants to use the Reach Authentix API. Indeed, once created, a configuartion could be used to authenticate several users in the future.    ### Step 2: Send an authentication code A configuration is used to send an authentication code via a selected channel to a user. For now, the supported channels are `sms`, and `email`. We are working hard to support additional channels. Newly created authentications will have a status of `awaiting`. ### Step 3: Verify the authentication code This step allows to verify that the code submitted by the user matched the one sent previously. If, there is a match, then the status of the authentication changes from `awaiting` to `passed`. Otherwise, the status remains `awaiting` until either it is verified or it expires. In the latter case, the status becomes `expired`. 
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { inspect, InspectOptions } from "util";
import Authentix from "../Authentix";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { isValidPathParam } from "../../../base/utility";



/**
 * Options to pass to fetch a AuthenticationTrialStatItemInstance
 */
export interface AuthenticationTrialStatItemContextFetchOptions {
  /** Filter authentication trials sent only to this phone number or email. The phone number must be in the E.164 format. */
  "dest"?: string;
  /** Filter authentication trials with the specified status. */
  "trialStatus"?: 'successful' | 'unsuccessful';
  /** Filter authentication trials sent via the specified channel. */
  "channel"?: 'sms' | 'email';
  /** Filter authentication trials from the configuration whose ID matches the specified one. */
  "configurationId"?: string;
  /** Filter authentication trials from the authentication whose ID matches the specified one. */
  "authenticationId"?: string;
  /** Filter authentication trials sent to the specified destination country (in ISO 3166-1 alpha-2). Only possible when `dest` is a phone number. */
  "country"?: string;
  /** Filter authentication trials created at the specified date. Must be in ISO 8601 format. */
  "sentAt"?: Date;
  /** Filter authentication trials created after the specified datetime. Must be in ISO 8601 format. */
  "sentAfter"?: Date;
  /** Filter authentication trials created before the specified datetime. Must be in ISO 8601 format. */
  "sentBefore"?: Date;
}

export interface AuthenticationTrialStatItemContext {

  /**
   * Fetch a AuthenticationTrialStatItemInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed AuthenticationTrialStatItemInstance
   */
  fetch(callback?: (error: Error | null, item?: AuthenticationTrialStatItemInstance) => any): Promise<AuthenticationTrialStatItemInstance>;
  /**
   * Fetch a AuthenticationTrialStatItemInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed AuthenticationTrialStatItemInstance
   */
  fetch(params: AuthenticationTrialStatItemContextFetchOptions, callback?: (error: Error | null, item?: AuthenticationTrialStatItemInstance) => any): Promise<AuthenticationTrialStatItemInstance>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface AuthenticationTrialStatItemContextSolution {
}

export class AuthenticationTrialStatItemContextImpl implements AuthenticationTrialStatItemContext {
  protected _solution: AuthenticationTrialStatItemContextSolution;
  protected _uri: string;


  constructor(protected _version: Authentix) {
    this._solution = {  };
    this._uri = `/authentix/v1/authenticationTrialStats`;
  }

  fetch(params?: AuthenticationTrialStatItemContextFetchOptions | ((error: Error | null, item?: AuthenticationTrialStatItemInstance) => any), callback?: (error: Error | null, item?: AuthenticationTrialStatItemInstance) => any): Promise<AuthenticationTrialStatItemInstance> {
      if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

        if (params["dest"] !== undefined)
    data["dest"] = params["dest"];
    if (params["trialStatus"] !== undefined)
    data["trialStatus"] = params["trialStatus"];
    if (params["channel"] !== undefined)
    data["channel"] = params["channel"];
    if (params["configurationId"] !== undefined)
    data["configurationId"] = params["configurationId"];
    if (params["authenticationId"] !== undefined)
    data["authenticationId"] = params["authenticationId"];
    if (params["country"] !== undefined)
    data["country"] = params["country"];
    if (params["sentAt"] !== undefined)
    data["sentAt"] = serialize.iso8601DateTime(params["sentAt"]);
    if (params["sentAfter"] !== undefined)
    data["sentAfter"] = serialize.iso8601DateTime(params["sentAfter"]);
    if (params["sentBefore"] !== undefined)
    data["sentBefore"] = serialize.iso8601DateTime(params["sentBefore"]);

    

    const headers: any = {};

    const instance = this;
    let operationVersion = instance._version,
        operationPromise = operationVersion.fetch({ uri: instance._uri, method: "get", params: data, headers });
    
    operationPromise = operationPromise.then(payload => new AuthenticationTrialStatItemInstance(operationVersion, payload));
    

    operationPromise = instance._version.setPromiseCallback(operationPromise,callback);
    return operationPromise;


  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}


interface AuthenticationTrialStatItemPayload extends AuthenticationTrialStatItemResource {}

interface AuthenticationTrialStatItemResource {
  appletId: string;
  apiVersion: string;
  totalTrials: number;
  numSuccessfulTrials: number;
  numUnsuccessfulTrials: number;
  successRate: number;
}

export class AuthenticationTrialStatItemInstance {
  protected _solution: AuthenticationTrialStatItemContextSolution;
  protected _context?: AuthenticationTrialStatItemContext;

  constructor(protected _version: Authentix, payload: AuthenticationTrialStatItemResource) {
    this.appletId = (payload.appletId);
    this.apiVersion = (payload.apiVersion);
    this.totalTrials = deserialize.integer(payload.totalTrials);
    this.numSuccessfulTrials = deserialize.integer(payload.numSuccessfulTrials);
    this.numUnsuccessfulTrials = deserialize.integer(payload.numUnsuccessfulTrials);
    this.successRate = (payload.successRate);

    this._solution = {  };
  }

  /**
   * The identifier of the applet.
   */
  appletId: string;
  /**
   * The API version.
   */
  apiVersion: string;
  /**
   * The total number of trials matching the specified criteria.
   */
  totalTrials: number;
  /**
   * The total number of successfull trials among the ones matching the specified criteria.
   */
  numSuccessfulTrials: number;
  /**
   * The total number of unsuccessfull trials among the ones matching the specified criteria.
   */
  numUnsuccessfulTrials: number;
  /**
   * The success rate of the trials matching the specified criteria.
   */
  successRate: number;

  private get _proxy(): AuthenticationTrialStatItemContext {
    this._context = this._context || new AuthenticationTrialStatItemContextImpl(this._version);
    return this._context;
  }

  /**
   * Fetch a AuthenticationTrialStatItemInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed AuthenticationTrialStatItemInstance
   */
  fetch(callback?: (error: Error | null, item?: AuthenticationTrialStatItemInstance) => any): Promise<AuthenticationTrialStatItemInstance>;
  /**
   * Fetch a AuthenticationTrialStatItemInstance
   *
   * @param params - Parameter for request
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed AuthenticationTrialStatItemInstance
   */
  fetch(params: AuthenticationTrialStatItemContextFetchOptions, callback?: (error: Error | null, item?: AuthenticationTrialStatItemInstance) => any): Promise<AuthenticationTrialStatItemInstance>;

    fetch(params?: any, callback?: (error: Error | null, item?: AuthenticationTrialStatItemInstance) => any): Promise<AuthenticationTrialStatItemInstance>
    {
    return this._proxy.fetch(params, callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      appletId: this.appletId,
      apiVersion: this.apiVersion,
      totalTrials: this.totalTrials,
      numSuccessfulTrials: this.numSuccessfulTrials,
      numUnsuccessfulTrials: this.numUnsuccessfulTrials,
      successRate: this.successRate,
    }
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}


export interface AuthenticationTrialStatItemSolution {
}

export interface AuthenticationTrialStatItemListInstance {
  _version: Authentix;
  _solution: AuthenticationTrialStatItemSolution;
  _uri: string;
  

  (): AuthenticationTrialStatItemContext;
  get(): AuthenticationTrialStatItemContext;




  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function AuthenticationTrialStatItemListInstance(version: Authentix): AuthenticationTrialStatItemListInstance {
  const instance = (() => instance.get()) as AuthenticationTrialStatItemListInstance;

  instance.get = function get(): AuthenticationTrialStatItemContext {
    return new AuthenticationTrialStatItemContextImpl(version);
  }

  instance._version = version;
  instance._solution = {  };
  instance._uri = ``;

  instance.toJSON = function toJSON() {
    return instance._solution;
  }

  instance[inspect.custom] = function inspectImpl(_depth: any, options: InspectOptions) {
    return inspect(instance.toJSON(), options);
  }

  return instance;
}


