/*
 * This code was generated by
 *  ___ ___   _   ___ _  _    _____ _   _    _  ___   ___      _   ___ ___      ___   _   ___     ___ ___ _  _ ___ ___    _ _____ ___  ___ 
 * | _ \ __| /_\ / __| || |__|_   _/_\ | |  | |/ | \ / / |    /_\ | _ ) __|___ / _ \ /_\ |_ _|__ / __| __| \| | __| _ \  /_\_   _/ _ \| _ \
 * |   / _| / _ \ (__| __ |___|| |/ _ \| |__| ' < \ V /| |__ / _ \| _ \__ \___| (_) / _ \ | |___| (_ | _|| .` | _||   / / _ \| || (_) |   /
 * |_|_\___/_/ \_\___|_||_|    |_/_/ \_\____|_|\_\ |_| |____/_/ \_\___/___/    \___/_/ \_\___|   \___|___|_|\_|___|_|_\/_/ \_\_| \___/|_|_\
 * 
 * Reach Authentix API
 *  Reach Authentix API helps you easily integrate user authentification in your application. The authentification allows to verify that a user is indeed at the origin of a request from your application.  At the moment, the Reach Authentix API supports the following channels:    * SMS      * Email   We are continuously working to add additionnal channels. ## Base URL All endpoints described in this documentation are relative to the following base URL: ``` https://api.reach.talkylabs.com/rest/authentix/v1/ ```  The API is provided over HTTPS protocol to ensure data privacy.  ## API Authentication Requests made to the API must be authenticated. You need to provide the `ApiUser` and `ApiKey` associated with your applet. This information could be found in the settings of the applet. ```curl curl -X GET [BASE_URL]/configurations -H \"ApiUser:[Your_Api_User]\" -H \"ApiKey:[Your_Api_Key]\" ``` ## Reach Authentix API Workflow Three steps are needed in order to authenticate a given user using the Reach Authentix API. ### Step 1: Create an Authentix configuration A configuration is a set of settings used to define and send an authentication code to a user. This includes, for example: ```   - the length of the authentication code,    - the message template,    - and so on... ``` A configuaration could be created via the web application or directly using the Reach Authentix API. This step does not need to be performed every time one wants to use the Reach Authentix API. Indeed, once created, a configuartion could be used to authenticate several users in the future.    ### Step 2: Send an authentication code A configuration is used to send an authentication code via a selected channel to a user. For now, the supported channels are `sms`, and `email`. We are working hard to support additional channels. Newly created authentications will have a status of `awaiting`. ### Step 3: Verify the authentication code This step allows to verify that the code submitted by the user matched the one sent previously. If, there is a match, then the status of the authentication changes from `awaiting` to `passed`. Otherwise, the status remains `awaiting` until either it is verified or it expires. In the latter case, the status becomes `expired`. 
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { inspect, InspectOptions } from "util";
import Page, { ReachResponsePayload } from "../../../base/Page";
import Response from "../../../http/response";
import Authentix from "../Authentix";
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
import { isValidPathParam } from "../../../base/utility";


/**
 * Information related to the digital payment to authenticate. It is required when `usedForDigitalPayment` is true. It is ignored otherwise.
 */
export class PaymentInfo {
  /**
   * The payee of the financial transaction.
   */
  "payee": string;
  /**
   * the amount of the transaction.
   */
  "amount": number;
  /**
   * The currency of the transaction.
   */
  "currency": string;
}



/**
 * Options to pass to each
 */
export interface AuthenticationTrialItemListInstanceEachOptions {
  /** Retrieve authentication trials sent only to this phone number or email. The phone number must be in the E.164 format. */
  "dest"?: string;
  /** Retrieve authentication trials with the specified status. */
  "trialStatus"?: 'successful' | 'unsuccessful';
  /** Retrieve authentication trials sent via the specified channel. */
  "channel"?: 'sms' | 'email';
  /** Retrieve authentication trials from the configuration whose ID matches the specified one. */
  "configurationId"?: string;
  /** Retrieve authentication trials from the authentication whose ID matches the specified one. */
  "authenticationId"?: string;
  /** Retrieve authentication trials sent to the specified destination country (in ISO 3166-1 alpha-2). Only possible when `dest` is a phone number. */
  "country"?: string;
  /** Retrieve only authentication trials created at the specified date. Must be in ISO 8601 format. */
  "sentAt"?: Date;
  /** Retrieve only authentication trials created after the specified datetime. Must be in ISO 8601 format. */
  "sentAfter"?: Date;
  /** Retrieve only authentication trials created before the specified datetime. Must be in ISO 8601 format. */
  "sentBefore"?: Date;
  /** Maximum number of records to return per call. */
  "pageSize"?: number;
  /** Function to process each record. If this and a positional callback are passed, this one will be used */
  callback?: (item: AuthenticationTrialItemInstance, done: (err?: Error) => void) => void;
  /** Function to be called upon completion of streaming */
  done?: Function;
  /** Upper limit for the number of records to return. each() guarantees never to return more than limit. Default is no limit */
  limit?: number;
}

/**
 * Options to pass to list
 */
export interface AuthenticationTrialItemListInstanceOptions {
  /** Retrieve authentication trials sent only to this phone number or email. The phone number must be in the E.164 format. */
  "dest"?: string;
  /** Retrieve authentication trials with the specified status. */
  "trialStatus"?: 'successful' | 'unsuccessful';
  /** Retrieve authentication trials sent via the specified channel. */
  "channel"?: 'sms' | 'email';
  /** Retrieve authentication trials from the configuration whose ID matches the specified one. */
  "configurationId"?: string;
  /** Retrieve authentication trials from the authentication whose ID matches the specified one. */
  "authenticationId"?: string;
  /** Retrieve authentication trials sent to the specified destination country (in ISO 3166-1 alpha-2). Only possible when `dest` is a phone number. */
  "country"?: string;
  /** Retrieve only authentication trials created at the specified date. Must be in ISO 8601 format. */
  "sentAt"?: Date;
  /** Retrieve only authentication trials created after the specified datetime. Must be in ISO 8601 format. */
  "sentAfter"?: Date;
  /** Retrieve only authentication trials created before the specified datetime. Must be in ISO 8601 format. */
  "sentBefore"?: Date;
  /** Maximum number of records to return per call. */
  "pageSize"?: number;
  /** Upper limit for the number of records to return. list() guarantees never to return more than limit. Default is no limit */
  limit?: number;
}

/**
 * Options to pass to page
 */
export interface AuthenticationTrialItemListInstancePageOptions {
  /** Retrieve authentication trials sent only to this phone number or email. The phone number must be in the E.164 format. */
  "dest"?: string;
  /** Retrieve authentication trials with the specified status. */
  "trialStatus"?: 'successful' | 'unsuccessful';
  /** Retrieve authentication trials sent via the specified channel. */
  "channel"?: 'sms' | 'email';
  /** Retrieve authentication trials from the configuration whose ID matches the specified one. */
  "configurationId"?: string;
  /** Retrieve authentication trials from the authentication whose ID matches the specified one. */
  "authenticationId"?: string;
  /** Retrieve authentication trials sent to the specified destination country (in ISO 3166-1 alpha-2). Only possible when `dest` is a phone number. */
  "country"?: string;
  /** Retrieve only authentication trials created at the specified date. Must be in ISO 8601 format. */
  "sentAt"?: Date;
  /** Retrieve only authentication trials created after the specified datetime. Must be in ISO 8601 format. */
  "sentAfter"?: Date;
  /** Retrieve only authentication trials created before the specified datetime. Must be in ISO 8601 format. */
  "sentBefore"?: Date;
  /** Maximum number of records to return per call. */
  "pageSize"?: number;
  /** Page Number, this value is simply for client state */
  pageNumber?: number;
}


export interface AuthenticationTrialItemContext {

  /**
   * Fetch a AuthenticationTrialItemInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed AuthenticationTrialItemInstance
   */
  fetch(callback?: (error: Error | null, item?: AuthenticationTrialItemInstance) => any): Promise<AuthenticationTrialItemInstance>


  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export interface AuthenticationTrialItemContextSolution {
  "trialId": string;
}

export class AuthenticationTrialItemContextImpl implements AuthenticationTrialItemContext {
  protected _solution: AuthenticationTrialItemContextSolution;
  protected _uri: string;


  constructor(protected _version: Authentix, trialId: string) {
    if (!isValidPathParam(trialId)) {
      throw new Error('Parameter \'trialId\' is not valid.');
    }

    this._solution = { trialId,  };
    this._uri = `/authentix/v1/authenticationTrials/${trialId}`;
  }

  fetch(callback?: (error: Error | null, item?: AuthenticationTrialItemInstance) => any): Promise<AuthenticationTrialItemInstance> {
  
    const instance = this;
    let operationVersion = instance._version,
        operationPromise = operationVersion.fetch({ uri: instance._uri, method: "get" });
    
    operationPromise = operationPromise.then(payload => new AuthenticationTrialItemInstance(operationVersion, payload, instance._solution.trialId));
    

    operationPromise = instance._version.setPromiseCallback(operationPromise,callback);
    return operationPromise;


  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return this._solution;
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}


interface AuthenticationTrialItemPayload extends ReachResponsePayload {
    authenticationTrials: AuthenticationTrialItemResource[];
}

interface AuthenticationTrialItemResource {
  appletId: string;
  apiVersion: string;
  configurationId: string;
  authenticationId: string;
  trialId: string;
  trialStatus: string;
  channel: string;
  paymentInfo: PaymentInfo;
  dateCreated: Date;
  dateUpdated: Date;
  price: number;
  priceUnit: string;
  channelInfo: { [key: string]: any; };
}

export class AuthenticationTrialItemInstance {
  protected _solution: AuthenticationTrialItemContextSolution;
  protected _context?: AuthenticationTrialItemContext;

  constructor(protected _version: Authentix, payload: AuthenticationTrialItemResource, trialId?: string) {
    this.appletId = (payload.appletId);
    this.apiVersion = (payload.apiVersion);
    this.configurationId = (payload.configurationId);
    this.authenticationId = (payload.authenticationId);
    this.trialId = (payload.trialId);
    this.trialStatus = (payload.trialStatus);
    this.channel = (payload.channel);
    this.paymentInfo = (payload.paymentInfo);
    this.dateCreated = deserialize.iso8601DateTime(payload.dateCreated);
    this.dateUpdated = deserialize.iso8601DateTime(payload.dateUpdated);
    this.price = (payload.price);
    this.priceUnit = (payload.priceUnit);
    this.channelInfo = (payload.channelInfo);

    this._solution = { trialId: trialId || this.trialId,  };
  }

  /**
   * The identifier of the applet.
   */
  appletId: string;
  /**
   * The API version.
   */
  apiVersion: string;
  /**
   * The identifier of the configuration.
   */
  configurationId: string;
  /**
   * The identifier of the authentication.
   */
  authenticationId: string;
  /**
   * The identifier of the authentication trial.
   */
  trialId: string;
  /**
   * The status of the authentication.
   */
  trialStatus: string;
  /**
   * The channel used.
   */
  channel: string;
  paymentInfo: PaymentInfo;
  /**
   * The date and time in GMT that the authentication trial was created. 
   */
  dateCreated: Date;
  /**
   * The date and time in GMT that the authentication trial was last updated. 
   */
  dateUpdated: Date;
  /**
   * The cost billed for the authentication trial, in the currency specified by `priceUnit`. This cost does not include the cost for checking the correctness of the code.
   */
  price: number;
  /**
   * The currency, in ISO 4127 format, in which price is measured. for example, usd, xaf, eur, cad.
   */
  priceUnit: string;
  /**
   * channel specific information related to a trial.
   */
  channelInfo: { [key: string]: any; };

  private get _proxy(): AuthenticationTrialItemContext {
    this._context = this._context || new AuthenticationTrialItemContextImpl(this._version, this._solution.trialId);
    return this._context;
  }

  /**
   * Fetch a AuthenticationTrialItemInstance
   *
   * @param callback - Callback to handle processed record
   *
   * @returns Resolves to processed AuthenticationTrialItemInstance
   */
  fetch(callback?: (error: Error | null, item?: AuthenticationTrialItemInstance) => any): Promise<AuthenticationTrialItemInstance>

    {
    return this._proxy.fetch(callback);
  }

  /**
   * Provide a user-friendly representation
   *
   * @returns Object
   */
  toJSON() {
    return {
      appletId: this.appletId,
      apiVersion: this.apiVersion,
      configurationId: this.configurationId,
      authenticationId: this.authenticationId,
      trialId: this.trialId,
      trialStatus: this.trialStatus,
      channel: this.channel,
      paymentInfo: this.paymentInfo,
      dateCreated: this.dateCreated,
      dateUpdated: this.dateUpdated,
      price: this.price,
      priceUnit: this.priceUnit,
      channelInfo: this.channelInfo,
    }
  }

  [inspect.custom](_depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
  }
}


export interface AuthenticationTrialItemSolution {
}

export interface AuthenticationTrialItemListInstance {
  _version: Authentix;
  _solution: AuthenticationTrialItemSolution;
  _uri: string;
  

  (trialId: string, ): AuthenticationTrialItemContext;
  get(trialId: string, ): AuthenticationTrialItemContext;





  /**
   * Streams AuthenticationTrialItemInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory
   * efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { AuthenticationTrialItemListInstanceEachOptions } [params] - Options for request
   * @param { function } [callback] - Function to process each record
   */
  each(callback?: (item: AuthenticationTrialItemInstance, done: (err?: Error) => void) => void): void;
  each(params: AuthenticationTrialItemListInstanceEachOptions, callback?: (item: AuthenticationTrialItemInstance, done: (err?: Error) => void) => void): void;
  /**
   * Retrieve a single target page of AuthenticationTrialItemInstance records from the API.
   *
   * The request is executed immediately.
   *
   * @param { string } [targetUrl] - API-generated URL for the requested results page
   * @param { function } [callback] - Callback to handle list of records
   */
  getPage(targetUrl: string, callback?: (error: Error | null, items: AuthenticationTrialItemPage) => any): Promise<AuthenticationTrialItemPage>;
  /**
   * Lists AuthenticationTrialItemInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { AuthenticationTrialItemListInstanceOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  list(callback?: (error: Error | null, items: AuthenticationTrialItemInstance[]) => any): Promise<AuthenticationTrialItemInstance[]>;
  list(params: AuthenticationTrialItemListInstanceOptions, callback?: (error: Error | null, items: AuthenticationTrialItemInstance[]) => any): Promise<AuthenticationTrialItemInstance[]>;
  /**
   * Retrieve a single page of AuthenticationTrialItemInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param { AuthenticationTrialItemListInstancePageOptions } [params] - Options for request
   * @param { function } [callback] - Callback to handle list of records
   */
  page(callback?: (error: Error | null, items: AuthenticationTrialItemPage) => any): Promise<AuthenticationTrialItemPage>;
  page(params: AuthenticationTrialItemListInstancePageOptions, callback?: (error: Error | null, items: AuthenticationTrialItemPage) => any): Promise<AuthenticationTrialItemPage>;

  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  [inspect.custom](_depth: any, options: InspectOptions): any;
}

export function AuthenticationTrialItemListInstance(version: Authentix): AuthenticationTrialItemListInstance {
  const instance = ((trialId, ) => instance.get(trialId, )) as AuthenticationTrialItemListInstance;

  instance.get = function get(trialId, ): AuthenticationTrialItemContext {
    return new AuthenticationTrialItemContextImpl(version, trialId);
  }

  instance._version = version;
  instance._solution = {  };
  instance._uri = `/authentix/v1/authenticationTrials`;

  instance.page = function page(params?: AuthenticationTrialItemListInstancePageOptions | ((error: Error | null, items: AuthenticationTrialItemPage) => any), callback?: (error: Error | null, items: AuthenticationTrialItemPage) => any): Promise<AuthenticationTrialItemPage> {
    if (params instanceof Function) {
      callback = params;
      params = {};
    } else {
      params = params || {};
    }

    let data: any = {};

        if (params["dest"] !== undefined)
    data["dest"] = params["dest"];
    if (params["trialStatus"] !== undefined)
    data["trialStatus"] = params["trialStatus"];
    if (params["channel"] !== undefined)
    data["channel"] = params["channel"];
    if (params["configurationId"] !== undefined)
    data["configurationId"] = params["configurationId"];
    if (params["authenticationId"] !== undefined)
    data["authenticationId"] = params["authenticationId"];
    if (params["country"] !== undefined)
    data["country"] = params["country"];
    if (params["sentAt"] !== undefined)
    data["sentAt"] = serialize.iso8601DateTime(params["sentAt"]);
    if (params["sentAfter"] !== undefined)
    data["sentAfter"] = serialize.iso8601DateTime(params["sentAfter"]);
    if (params["sentBefore"] !== undefined)
    data["sentBefore"] = serialize.iso8601DateTime(params["sentBefore"]);
    if (params["pageSize"] !== undefined)
    data["pageSize"] = params["pageSize"];

    
    if (params.pageNumber !== undefined) data["page"] = params.pageNumber;

    const headers: any = {};

    let operationVersion = version,
        operationPromise = operationVersion.page({ uri: instance._uri, method: "get", params: data, headers });
    
    let basePageUrl = operationVersion.urlWithoutPaginationInfo(operationVersion.absoluteUrl(instance._uri), data);
    operationPromise = operationPromise.then(payload => new AuthenticationTrialItemPage(basePageUrl, operationVersion, payload, instance._solution));

    operationPromise = instance._version.setPromiseCallback(operationPromise,callback);
    return operationPromise;

  }
  instance.each = instance._version.each;
  instance.list = instance._version.list;

  instance.getPage = function getPage(targetUrl: string, callback?: (error: Error | null, items: AuthenticationTrialItemPage) => any): Promise<AuthenticationTrialItemPage> {
    const operationPromise = instance._version._domain.reach.request({method: "get", uri: targetUrl});

    let basePageUrl = instance._version.urlWithoutPaginationInfo(targetUrl);
    let pagePromise = operationPromise.then(payload => new AuthenticationTrialItemPage(basePageUrl, instance._version, payload, instance._solution));
    pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
    return pagePromise;
  }


  instance.toJSON = function toJSON() {
    return instance._solution;
  }

  instance[inspect.custom] = function inspectImpl(_depth: any, options: InspectOptions) {
    return inspect(instance.toJSON(), options);
  }

  return instance;
}

export class AuthenticationTrialItemPage extends Page<Authentix, AuthenticationTrialItemPayload, AuthenticationTrialItemResource, AuthenticationTrialItemInstance> {
/**
* Initialize the AuthenticationTrialItemPage
*
* @param url - the url of the resource without pagination info
* @param version - Version of the resource
* @param response - Response from the API
* @param solution - Path solution
*/
constructor(url: string, version: Authentix, response: Response<string>, solution: AuthenticationTrialItemSolution) {
    super(url, version, response, solution);
    }

    /**
    * Build an instance of AuthenticationTrialItemInstance
    *
    * @param payload - Payload response from the API
    */
    getInstance(payload: AuthenticationTrialItemResource): AuthenticationTrialItemInstance {
    return new AuthenticationTrialItemInstance(
    this._version,
    payload,
    );
    }

    [inspect.custom](depth: any, options: InspectOptions) {
    return inspect(this.toJSON(), options);
    }
    }

